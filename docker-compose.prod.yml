version: "3.9"

services:
  api:
    build:
      args:
        RUBY_VERSION: ${RUBY_VERSION}
      context: .
      dockerfile: ./docker/rails/Dockerfile
    restart: always
    command: [ "rails", "s", "-b", "0.0.0.0", "-p", "3000", "-e", "production" ]
    environment:
      TZ: "Asia/Kuala_Lumpur"
      MYHEARTY_DB_USER: ${POSTGRES_USER}
      MYHEARTY_DB_PASSWORD: ${POSTGRES_PASSWORD}
      MYHEARTY_DB_HOST: ${POSTGRES_HOST}
      TYPESENSE_API_KEY: ${TYPESENSE_API_KEY}
    ports:
      - "3000:3000"
    volumes:
      - .:/api
    depends_on:
      - db
      - redis
      - sidekiq
      - typesense

  db:
    image: postgres:${POSTGRES_VERSION}
    restart: always
    environment:
      TZ: "Asia/Kuala_Lumpur"
      PGTZ: "Asia/Kuala_Lumpur"
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: myhearty_production
    ports:
      - "5432:5432"
    volumes:
      - postgres:/var/lib/postgresql/data
    networks:
      default:
        aliases:
          - ${POSTGRES_HOST}

  redis:
    image: redis:${REDIS_VERSION}
    sysctls:
      net.core.somaxconn: 1024
    restart: always
    command: [ "redis-server" ]
    environment:
      TZ: "Asia/Kuala_Lumpur"
    ports:
      - "6379:6379"
    volumes:
      - redis:/data

  sidekiq:
    build:
      args:
        RUBY_VERSION: ${RUBY_VERSION}
      context: .
      dockerfile: ./docker/rails/Dockerfile
    restart: always
    command: [ "bundle", "exec", "sidekiq", "-C", "config/sidekiq.yml", "-e", "production" ]
    environment:
      TZ: "Asia/Kuala_Lumpur"
      MYHEARTY_DB_USER: ${POSTGRES_USER}
      MYHEARTY_DB_PASSWORD: ${POSTGRES_PASSWORD}
      MYHEARTY_DB_HOST: ${POSTGRES_HOST}
      TYPESENSE_API_KEY: ${TYPESENSE_API_KEY}
    volumes:
      - .:/api
    depends_on:
      - redis

  typesense:
    image: typesense/typesense:${TYPESENSE_VERSION}
    restart: always
    environment:
      TYPESENSE_DATA_DIR: /data
      TYPESENSE_API_KEY: ${TYPESENSE_API_KEY}
      TYPESENSE_ENABLE_CORS: "true"
      TYPESENSE_SSL_CERTIFICATE: /etc/typesense/certs/live/api.myhearty.my/fullchain.pem
      TYPESENSE_SSL_CERTIFICATE_KEY: /etc/typesense/certs/live/api.myhearty.my/privkey.pem
    ports:
      - "8108:8108"
    volumes:
      - typesense:/data
      - /etc/letsencrypt:/etc/typesense/certs:ro

  nginx:
    image: nginx:${NGINX_VERSION}
    restart: always
    environment:
      TZ: "Asia/Kuala_Lumpur"
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - /etc/letsencrypt:/etc/nginx/certs:ro
    depends_on:
      - api

volumes:
  api:
  postgres:
  redis:
  typesense:
